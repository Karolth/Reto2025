---
import Layout from '../../layouts/Layout.astro';
import { getEventos } from '../../lib/api';

const eventos = await getEventos();
---

<Layout title="Gestión de Eventos - Admin">
  <div class="admin-wrapper">
    <!-- Sidebar -->
    <aside class="admin-sidebar">
      <div class="sidebar-header">
        <h2 class="sidebar-logo">CONCERTO</h2>
        <span class="sidebar-subtitle">PANEL ADMIN</span>
      </div>
      <nav class="sidebar-nav">
        <a href="/admin/dashboard" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="7" height="7"></rect>
            <rect x="14" y="3" width="7" height="7"></rect>
            <rect x="14" y="14" width="7" height="7"></rect>
            <rect x="3" y="14" width="7" height="7"></rect>
          </svg>
          Dashboard
        </a>
        <a href="/admin/eventos" class="nav-item active">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Eventos
        </a>
        <a href="/admin/artistas" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 18V5l12-2v13"></path>
            <circle cx="6" cy="18" r="3"></circle>
            <circle cx="18" cy="16" r="3"></circle>
          </svg>
          Artistas
        </a>
        <a href="/admin/localidades" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
            <circle cx="12" cy="10" r="3"></circle>
          </svg>
          Localidades
        </a>
        <a href="/" class="nav-item nav-logout">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          Cerrar Sesión
        </a>
      </nav>
    </aside>

    <!-- Main Content -->
    <main class="admin-main">
      <div class="admin-header">
        <div>
          <h1>GESTIÓN DE EVENTOS</h1>
          <p>Administra todos los eventos del sistema</p>
        </div>
        <button id="btnCrearEvento" class="btn-primary">CREAR EVENTO</button>
      </div>

      <!-- Filtros -->
      <div class="filters-section">
        <input type="text" id="searchEvento" placeholder="Buscar por nombre..." class="filter-input">
        <select id="estadoFilter" class="filter-select">
          <option value="">Todos los estados</option>
          <option value="activo">Activos</option>
          <option value="finalizado">Finalizados</option>
        </select>
        <select id="departamentoFilter" class="filter-select">
          <option value="">Todos los departamentos</option>
        </select>
      </div>

      <!-- Tabla de Eventos -->
      <div class="table-section">
        <table class="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>NOMBRE</th>
              <th>DESCRIPCIÓN</th>
              <th>FECHA INICIO</th>
              <th>FECHA FIN</th>
              <th>UBICACIÓN</th>
              <th>ESTADO</th>
              <th>ACCIONES</th>
            </tr>
          </thead>
          <tbody id="eventosTableBody">
            {eventos.map(evento => (
              <tr data-estado={new Date(evento.fecha_fin) >= new Date() ? 'activo' : 'finalizado'}
                  data-departamento={evento.departamento}
                  data-nombre={evento.nombre.toLowerCase()}>
                <td><span class="table-id">#{evento.id_evento}</span></td>
                <td class="evento-nombre">{evento.nombre}</td>
                <td class="evento-desc">{evento.descripcion.substring(0, 60)}...</td>
                <td>{new Date(evento.fecha_inicio).toLocaleDateString('es-CO')}</td>
                <td>{new Date(evento.fecha_fin).toLocaleDateString('es-CO')}</td>
                <td>
                  <div class="ubicacion-info">
                    <strong>{evento.municipio}</strong>
                    <small>{evento.departamento}</small>
                  </div>
                </td>
                <td>
                  <span class={`badge ${new Date(evento.fecha_fin) >= new Date() ? 'badge-active' : 'badge-finished'}`}>
                    {new Date(evento.fecha_fin) >= new Date() ? 'ACTIVO' : 'FINALIZADO'}
                  </span>
                </td>
                <td>
                  <div class="action-buttons">
                    <button class="btn-action btn-edit" data-id={evento.id_evento}>EDITAR</button>
                    <a href={`/admin/boleteria?evento=${evento.id_evento}`} class="btn-action btn-ticket">BOLETERÍA</a>
                    <a href={`/eventos/${evento.id_evento}`} class="btn-action btn-view" target="_blank">VER</a>
                    <button class="btn-action btn-delete" data-id={evento.id_evento}>ELIMINAR</button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {eventos.length === 0 && (
          <div class="no-data">
            <svg class="no-data-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            <h3>NO HAY EVENTOS REGISTRADOS</h3>
            <p>Comienza creando tu primer evento</p>
            <button id="btnCrearPrimerEvento" class="btn-primary">CREAR PRIMER EVENTO</button>
          </div>
        )}
      </div>
    </main>
  </div>

  <!-- Modal Crear/Editar Evento -->
  <div id="eventoModal" class="modal">
    <div class="modal-content-large">
      <div class="modal-header">
        <h2 id="modalTitle">CREAR EVENTO</h2>
        <button id="closeModal" class="btn-close">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      
      <form id="eventoForm">
        <input type="hidden" id="eventoId">
        
        <div class="form-grid">
          <div class="form-group full-width">
            <label for="nombre">NOMBRE DEL EVENTO</label>
            <input type="text" id="nombre" name="nombre" required placeholder="Ej: Festival de Rock 2025">
          </div>

          <div class="form-group full-width">
            <label for="descripcion">DESCRIPCIÓN</label>
            <textarea id="descripcion" name="descripcion" required rows="4" placeholder="Describe el evento..."></textarea>
          </div>

          <div class="form-group">
            <label for="fecha_inicio">FECHA Y HORA DE INICIO</label>
            <input type="datetime-local" id="fecha_inicio" name="fecha_inicio" required>
          </div>

          <div class="form-group">
            <label for="fecha_fin">FECHA Y HORA DE FIN</label>
            <input type="datetime-local" id="fecha_fin" name="fecha_fin" required>
          </div>

          <div class="form-group">
            <label for="departamento">DEPARTAMENTO</label>
            <input type="text" id="departamento" name="departamento" required placeholder="Ej: Cundinamarca">
          </div>

          <div class="form-group">
            <label for="municipio">MUNICIPIO</label>
            <input type="text" id="municipio" name="municipio" required placeholder="Ej: Bogotá">
          </div>

          <div class="form-group full-width">
            <label for="lugar">LUGAR DEL EVENTO</label>
            <input type="text" id="lugar" name="lugar" required placeholder="Ej: Movistar Arena">
          </div>
        </div>

        <div class="form-actions">
          <button type="button" id="cancelForm" class="btn-secondary">CANCELAR</button>
          <button type="submit" class="btn-primary" id="submitBtn">GUARDAR EVENTO</button>
        </div>
      </form>

      <div id="formMensaje" class="mensaje"></div>
    </div>
  </div>

  <!-- Modal de confirmación de eliminación -->
  <div id="deleteModal" class="modal">
    <div class="modal-content">
      <h3>CONFIRMAR ELIMINACIÓN</h3>
      <p>¿Estás seguro que deseas eliminar este evento? Esta acción no se puede deshacer.</p>
      <div class="modal-actions">
        <button id="cancelDelete" class="btn-secondary">CANCELAR</button>
        <button id="confirmDelete" class="btn-danger">ELIMINAR</button>
      </div>
    </div>
  </div>
</Layout>

<style>
  .admin-wrapper {
    display: flex;
    min-height: 100vh;
    background: #0a0a0a;
  }

  .admin-sidebar {
    width: 280px;
    background: linear-gradient(180deg, #2d0a4e 0%, #1a0033 100%);
    border-right: 3px solid #ff0066;
    position: fixed;
    height: 100vh;
    overflow-y: auto;
  }

  .sidebar-header {
    padding: 2rem 1.5rem;
    border-bottom: 2px solid rgba(255, 0, 102, 0.3);
  }

  .sidebar-logo {
    color: #fff;
    font-size: 1.8rem;
    font-weight: 900;
    letter-spacing: 3px;
    background: linear-gradient(90deg, #ff0066, #ff6b9d);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 0.3rem;
  }

  .sidebar-subtitle {
    color: #aaa;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 2px;
  }

  .sidebar-nav {
    padding: 1.5rem 0;
  }

  .nav-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.5rem;
    color: #ccc;
    text-decoration: none;
    transition: all 0.3s;
    font-weight: 600;
    font-size: 0.95rem;
    letter-spacing: 0.5px;
  }

  .nav-icon {
    width: 22px;
    height: 22px;
    stroke-width: 2.5;
  }

  .nav-item:hover {
    background: rgba(255, 0, 102, 0.15);
    color: #fff;
    border-left: 4px solid #ff0066;
  }

  .nav-item.active {
    background: rgba(255, 0, 102, 0.2);
    color: #ff0066;
    border-left: 4px solid #ff0066;
  }

  .nav-logout {
    margin-top: 2rem;
    border-top: 2px solid rgba(255, 0, 102, 0.3);
    padding-top: 1.5rem;
    color: #ff6b6b;
  }

  .nav-logout:hover {
    background: rgba(255, 107, 107, 0.1);
    border-left: 4px solid #ff6b6b;
  }

  .admin-main {
    flex: 1;
    margin-left: 280px;
    padding: 2.5rem;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2.5rem;
  }

  .admin-header h1 {
    font-size: 2.8rem;
    font-weight: 900;
    color: #ff0066;
    margin-bottom: 0.5rem;
    letter-spacing: 3px;
  }

  .admin-header p {
    color: #aaa;
    font-size: 1.1rem;
  }

  .btn-primary {
    padding: 0.9rem 2rem;
    background: linear-gradient(135deg, #ff0066, #cc0052);
    color: #fff;
    text-decoration: none;
    border-radius: 30px;
    font-weight: 700;
    transition: all 0.3s;
    border: none;
    cursor: pointer;
    font-size: 0.9rem;
    letter-spacing: 1px;
  }

  .btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(255, 0, 102, 0.5);
  }

  /* Filters */
  .filters-section {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    gap: 1rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    border: 2px solid rgba(255, 0, 102, 0.2);
  }

  .filter-input, .filter-select {
    padding: 0.9rem 1rem;
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 0, 102, 0.3);
    border-radius: 10px;
    color: #fff;
    font-size: 0.95rem;
    transition: all 0.3s;
  }

  .filter-input:focus, .filter-select:focus {
    outline: none;
    border-color: #ff0066;
    box-shadow: 0 0 15px rgba(255, 0, 102, 0.3);
  }

  .filter-select option {
    background: #1a0033;
  }

  /* Table */
  .table-section {
    background: rgba(255, 255, 255, 0.03);
    padding: 2rem;
    border-radius: 15px;
    border: 2px solid rgba(255, 0, 102, 0.2);
    overflow-x: auto;
  }

  .admin-table {
    width: 100%;
    border-collapse: collapse;
  }

  .admin-table thead {
    background: rgba(255, 0, 102, 0.1);
  }

  .admin-table th {
    padding: 1.2rem 1rem;
    text-align: left;
    color: #ff0066;
    font-weight: 700;
    border-bottom: 2px solid #ff0066;
    font-size: 0.85rem;
    letter-spacing: 1px;
    white-space: nowrap;
  }

  .admin-table td {
    padding: 1.2rem 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    color: #ccc;
  }

  .admin-table tbody tr {
    transition: all 0.3s;
  }

  .admin-table tbody tr:hover {
    background: rgba(255, 0, 102, 0.08);
  }

  .table-id {
    color: #ff0066;
    font-weight: 700;
  }

  .evento-nombre {
    color: #fff;
    font-weight: 600;
    max-width: 200px;
  }

  .evento-desc {
    max-width: 250px;
    font-size: 0.9rem;
    color: #aaa;
  }

  .ubicacion-info {
    display: flex;
    flex-direction: column;
  }

  .ubicacion-info strong {
    color: #fff;
    font-size: 0.95rem;
  }

  .ubicacion-info small {
    color: #aaa;
    font-size: 0.85rem;
  }

  .badge {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 700;
    letter-spacing: 0.5px;
    display: inline-block;
    white-space: nowrap;
  }

  .badge-active {
    background: rgba(0, 255, 136, 0.2);
    color: #00ff88;
    border: 1px solid #00ff88;
  }

  .badge-finished {
    background: rgba(255, 107, 107, 0.2);
    color: #ff6b6b;
    border: 1px solid #ff6b6b;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .btn-action {
    padding: 0.6rem 1rem;
    border-radius: 8px;
    text-decoration: none;
    font-size: 0.75rem;
    font-weight: 700;
    transition: all 0.3s;
    letter-spacing: 0.5px;
    border: none;
    cursor: pointer;
    white-space: nowrap;
  }

  .btn-edit {
    background: rgba(255, 165, 0, 0.15);
    color: #ffaa00;
    border: 1px solid #ffaa00;
  }

  .btn-edit:hover {
    background: #ffaa00;
    color: #000;
  }

  .btn-ticket {
    background: rgba(138, 43, 226, 0.15);
    color: #8a2be2;
    border: 1px solid #8a2be2;
  }

  .btn-ticket:hover {
    background: #8a2be2;
    color: #fff;
  }

  .btn-view {
    background: rgba(0, 136, 255, 0.15);
    color: #0088ff;
    border: 1px solid #0088ff;
  }

  .btn-view:hover {
    background: #0088ff;
    color: #fff;
  }

  .btn-delete {
    background: rgba(255, 107, 107, 0.15);
    color: #ff6b6b;
    border: 1px solid #ff6b6b;
  }

  .btn-delete:hover {
    background: #ff6b6b;
    color: #fff;
  }

  .no-data {
    text-align: center;
    padding: 4rem 2rem;
  }

  .no-data-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 1.5rem;
    stroke: #ff0066;
    opacity: 0.5;
  }

  .no-data h3 {
    color: #ff0066;
    font-size: 1.8rem;
    margin-bottom: 1rem;
    font-weight: 900;
    letter-spacing: 2px;
  }

  .no-data p {
    color: #aaa;
    font-size: 1.1rem;
    margin-bottom: 2rem;
    }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.85);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(5px);
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    background: linear-gradient(135deg, #2d0a4e 0%, #1a0033 100%);
    padding: 3rem;
    border-radius: 20px;
    border: 2px solid #ff0066;
    max-width: 500px;
    text-align: center;
    animation: modalSlideIn 0.3s ease-out;
  }

  .modal-content-large {
    background: linear-gradient(135deg, #2d0a4e 0%, #1a0033 100%);
    padding: 2.5rem;
    border-radius: 20px;
    border: 2px solid #ff0066;
    max-width: 900px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    animation: modalSlideIn 0.3s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid rgba(255, 0, 102, 0.3);
  }

  .modal-header h2 {
    color: #ff0066;
    font-size: 2rem;
    font-weight: 900;
    letter-spacing: 2px;
  }

  .btn-close {
    background: none;
    border: none;
    color: #fff;
    cursor: pointer;
    padding: 0.5rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }

  .btn-close svg {
    width: 24px;
    height: 24px;
    stroke-width: 3;
  }

  .btn-close:hover {
    background: rgba(255, 0, 102, 0.2);
    border-radius: 50%;
  }

  .modal-content h3 {
    color: #ff0066;
    font-size: 1.8rem;
    margin-bottom: 1rem;
    font-weight: 900;
    letter-spacing: 2px;
  }

  .modal-content p {
    color: #ccc;
    font-size: 1.1rem;
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .modal-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  /* Form */
  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group.full-width {
    grid-column: 1 / -1;
  }

  .form-group label {
    color: #ff0066;
    font-weight: 700;
    font-size: 0.9rem;
    margin-bottom: 0.8rem;
    letter-spacing: 1px;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    padding: 1rem;
    background: rgba(0, 0, 0, 0.4);
    border: 2px solid rgba(255, 0, 102, 0.3);
    border-radius: 10px;
    color: #fff;
    font-size: 1rem;
    transition: all 0.3s;
    font-family: 'Montserrat', sans-serif;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: #ff0066;
    box-shadow: 0 0 15px rgba(255, 0, 102, 0.3);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }

  .btn-secondary {
    padding: 0.9rem 2rem;
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 2px solid #fff;
    border-radius: 30px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 0.9rem;
    letter-spacing: 1px;
  }

  .btn-secondary:hover {
    background: #fff;
    color: #1a0033;
  }

  .btn-danger {
    padding: 0.9rem 2rem;
    background: linear-gradient(135deg, #ff6b6b, #ff0000);
    color: #fff;
    border: none;
    border-radius: 30px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 0.9rem;
    letter-spacing: 1px;
  }

  .btn-danger:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.5);
  }

  .mensaje {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 10px;
    font-weight: 600;
    text-align: center;
    display: none;
  }

  .mensaje.success {
    background: rgba(0, 255, 136, 0.2);
    color: #00ff88;
    border: 2px solid #00ff88;
    display: block;
  }

  .mensaje.error {
    background: rgba(255, 107, 107, 0.2);
    color: #ff6b6b;
    border: 2px solid #ff6b6b;
    display: block;
  }

  @media (max-width: 968px) {
    .admin-sidebar {
      width: 100%;
      position: relative;
      height: auto;
    }

    .admin-main {
      margin-left: 0;
      padding: 1.5rem;
    }

    .filters-section {
      grid-template-columns: 1fr;
    }

    .admin-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .admin-header h1 {
      font-size: 2rem;
    }

    .action-buttons {
      flex-direction: column;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .modal-content-large {
      width: 95%;
      padding: 1.5rem;
    }
  }
</style>

<script>
  const API_URL = 'http://127.0.0.1:8000';
  
  // Elementos del DOM
  const btnCrearEvento = document.getElementById('btnCrearEvento') as HTMLButtonElement;
  const btnCrearPrimerEvento = document.getElementById('btnCrearPrimerEvento') as HTMLButtonElement;
  const eventoModal = document.getElementById('eventoModal') as HTMLElement;
  const deleteModal = document.getElementById('deleteModal') as HTMLElement;
  const closeModal = document.getElementById('closeModal') as HTMLButtonElement;
  const cancelForm = document.getElementById('cancelForm') as HTMLButtonElement;
  const eventoForm = document.getElementById('eventoForm') as HTMLFormElement;
  const modalTitle = document.getElementById('modalTitle') as HTMLHeadingElement;
  const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
  const formMensaje = document.getElementById('formMensaje') as HTMLElement;
  const cancelDelete = document.getElementById('cancelDelete') as HTMLButtonElement;
  const confirmDelete = document.getElementById('confirmDelete') as HTMLButtonElement;

  // Filtros
  const searchInput = document.getElementById('searchEvento') as HTMLInputElement;
  const estadoFilter = document.getElementById('estadoFilter') as HTMLSelectElement;
  const departamentoFilter = document.getElementById('departamentoFilter') as HTMLSelectElement;
  const eventosRows = document.querySelectorAll('#eventosTableBody tr');

  let eventoIdToDelete: number | null = null;
  let isEditMode = false;
  let currentEventoId: number | null = null;

  // Poblar filtro de departamentos
  const departamentos = new Set<string>();
  eventosRows.forEach(row => {
    const depto = row.getAttribute('data-departamento');
    if (depto) departamentos.add(depto);
  });

  departamentos.forEach(depto => {
    const option = document.createElement('option');
    option.value = depto;
    option.textContent = depto;
    departamentoFilter.appendChild(option);
  });

  // Función para formatear fecha a datetime-local
  function formatDateTime(dateString: string): string {
    const d = new Date(dateString);
    return d.toISOString().slice(0, 16);
  }

  // Función para abrir modal de crear
  function abrirModalCrear() {
    isEditMode = false;
    currentEventoId = null;
    modalTitle.textContent = 'CREAR EVENTO';
    submitBtn.textContent = 'CREAR EVENTO';
    eventoForm.reset();
    (document.getElementById('eventoId') as HTMLInputElement).value = '';
    formMensaje.className = 'mensaje';
    formMensaje.style.display = 'none';
    eventoModal.classList.add('active');
  }

  // Función para abrir modal de editar
  async function abrirModalEditar(id: number) {
    isEditMode = true;
    currentEventoId = id;
    modalTitle.textContent = 'EDITAR EVENTO';
    submitBtn.textContent = 'ACTUALIZAR EVENTO';
    formMensaje.className = 'mensaje';
    formMensaje.style.display = 'none';

    try {
      const response = await fetch(`${API_URL}/eventos/${id}`);
      const result = await response.json();

      if (result.success && result.data) {
        const evento = result.data;
        (document.getElementById('eventoId') as HTMLInputElement).value = String(evento.id_evento);
        (document.getElementById('nombre') as HTMLInputElement).value = evento.nombre;
        (document.getElementById('descripcion') as HTMLTextAreaElement).value = evento.descripcion;
        (document.getElementById('fecha_inicio') as HTMLInputElement).value = formatDateTime(evento.fecha_inicio);
        (document.getElementById('fecha_fin') as HTMLInputElement).value = formatDateTime(evento.fecha_fin);
        (document.getElementById('departamento') as HTMLInputElement).value = evento.departamento;
        (document.getElementById('municipio') as HTMLInputElement).value = evento.municipio;
        (document.getElementById('lugar') as HTMLInputElement).value = evento.lugar;

        eventoModal.classList.add('active');
      }
    } catch (error) {
      console.error('Error al cargar evento:', error);
      alert('Error al cargar el evento');
    }
  }

  // Función para cerrar modal
  function cerrarModal() {
    eventoModal.classList.remove('active');
    eventoForm.reset();
  }

  // Event Listeners
  btnCrearEvento?.addEventListener('click', abrirModalCrear);
  btnCrearPrimerEvento?.addEventListener('click', abrirModalCrear);
  closeModal.addEventListener('click', cerrarModal);
  cancelForm.addEventListener('click', cerrarModal);

  // Cerrar modal al hacer clic fuera
  eventoModal.addEventListener('click', (e) => {
    if (e.target === eventoModal) {
      cerrarModal();
    }
  });

  // Submit del formulario
  eventoForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(eventoForm);
    const data = {
      nombre: formData.get('nombre') as string,
      descripcion: formData.get('descripcion') as string,
      fecha_inicio: formData.get('fecha_inicio') as string,
      fecha_fin: formData.get('fecha_fin') as string,
      municipio: formData.get('municipio') as string,
      departamento: formData.get('departamento') as string,
      lugar: formData.get('lugar') as string,
    };

    try {
      const url = isEditMode ? `${API_URL}/eventos/${currentEventoId}` : `${API_URL}/eventos`;
      const method = isEditMode ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (result.success) {
        formMensaje.className = 'mensaje success';
        formMensaje.textContent = isEditMode ? 'Evento actualizado correctamente' : 'Evento creado correctamente';
        formMensaje.style.display = 'block';
        
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        formMensaje.className = 'mensaje error';
        formMensaje.textContent = 'Error: ' + result.message;
        formMensaje.style.display = 'block';
      }
    } catch (error) {
      formMensaje.className = 'mensaje error';
      formMensaje.textContent = 'Error al procesar la solicitud';
      formMensaje.style.display = 'block';
      console.error(error);
    }
  });

  // Botones de editar
  document.querySelectorAll('.btn-edit').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      const id = Number(target.dataset.id);
      abrirModalEditar(id);
    });
  });

  // Botones de eliminar
  document.querySelectorAll('.btn-delete').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      eventoIdToDelete = Number(target.dataset.id);
      deleteModal.classList.add('active');
    });
  });

  cancelDelete.addEventListener('click', () => {
    deleteModal.classList.remove('active');
    eventoIdToDelete = null;
  });

  confirmDelete.addEventListener('click', async () => {
    if (eventoIdToDelete) {
      try {
        const response = await fetch(`${API_URL}/eventos/${eventoIdToDelete}`, {
          method: 'DELETE',
        });
        const result = await response.json();
        
        if (result.success) {
          alert('Evento eliminado correctamente');
          window.location.reload();
        } else {
          alert('Error al eliminar el evento: ' + result.message);
        }
      } catch (error) {
        alert('Error al eliminar el evento');
        console.error(error);
      }
    }
    deleteModal.classList.remove('active');
  });

  // Cerrar modal de eliminación al hacer clic fuera
  deleteModal.addEventListener('click', (e) => {
    if (e.target === deleteModal) {
      deleteModal.classList.remove('active');
      eventoIdToDelete = null;
    }
  });

  // Filtrado en tiempo real
  function filterEventos() {
    const searchTerm = searchInput.value.toLowerCase();
    const estadoValue = estadoFilter.value;
    const deptoValue = departamentoFilter.value;

    eventosRows.forEach(row => {
      const nombre = row.getAttribute('data-nombre') || '';
      const estado = row.getAttribute('data-estado') || '';
      const depto = row.getAttribute('data-departamento') || '';

      const matchSearch = nombre.includes(searchTerm);
      const matchEstado = !estadoValue || estado === estadoValue;
      const matchDepto = !deptoValue || depto === deptoValue;

      if (matchSearch && matchEstado && matchDepto) {
        (row as HTMLElement).style.display = '';
      } else {
        (row as HTMLElement).style.display = 'none';
      }
    });
  }

  searchInput.addEventListener('input', filterEventos);
  estadoFilter.addEventListener('change', filterEventos);
  departamentoFilter.addEventListener('change', filterEventos);
</script>