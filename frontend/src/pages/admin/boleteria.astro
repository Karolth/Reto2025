---
import Layout from '../../layouts/Layout.astro';
import { getEventos, getLocalidades } from '../../lib/api';

const eventos = await getEventos();
const localidades = await getLocalidades();

// Obtener el ID del evento de los query params si existe
const url = new URL(Astro.request.url);
const eventoSeleccionado = url.searchParams.get('evento');
---

<Layout title="Gestión de Boletería - Admin">
  <div class="admin-wrapper">
    <!-- Sidebar -->
    <aside class="admin-sidebar">
      <div class="sidebar-header">
        <h2 class="sidebar-logo">CONCERTO</h2>
        <span class="sidebar-subtitle">PANEL ADMIN</span>
      </div>
      <nav class="sidebar-nav">
        <a href="/admin/dashboard" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="7" height="7"></rect>
            <rect x="14" y="3" width="7" height="7"></rect>
            <rect x="14" y="14" width="7" height="7"></rect>
            <rect x="3" y="14" width="7" height="7"></rect>
          </svg>
          Dashboard
        </a>
        <a href="/admin/eventos" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          Eventos
        </a>
        <a href="/admin/artistas" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 18V5l12-2v13"></path>
            <circle cx="6" cy="18" r="3"></circle>
            <circle cx="18" cy="16" r="3"></circle>
          </svg>
          Artistas
        </a>
        <a href="/admin/localidades" class="nav-item">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
            <circle cx="12" cy="10" r="3"></circle>
          </svg>
          Localidades
        </a>
        <a href="/" class="nav-item nav-logout">
          <svg class="nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          Cerrar Sesión
        </a>
      </nav>
    </aside>

    <!-- Main Content -->
    <main class="admin-main">
      <div class="admin-header">
        <div>
          <h1>GESTIÓN DE BOLETERÍA</h1>
          <p>Configura la boletería para cada evento</p>
        </div>
        <button id="btnCrearBoleteria" class="btn-primary" disabled>AGREGAR BOLETERÍA</button>
      </div>

      <!-- Selector de Evento -->
      <div class="selector-section">
        <div class="form-group">
          <label for="selectEvento">SELECCIONAR EVENTO</label>
          <select id="selectEvento" class="evento-select">
            <option value="">-- Selecciona un evento --</option>
            {eventos.map(evento => (
              <option value={evento.id_evento} selected={eventoSeleccionado === String(evento.id_evento)}>
                {evento.nombre} - {new Date(evento.fecha_inicio).toLocaleDateString('es-CO')}
              </option>
            ))}
          </select>
        </div>
      </div>

      <!-- Info del Evento Seleccionado -->
      <div id="eventoInfo" class="evento-info-section" style="display: none;">
        <div class="evento-info-card">
          <h3 id="eventoNombre"></h3>
          <div class="evento-detalles">
            <span id="eventoFecha"></span>
            <span id="eventoLugar"></span>
          </div>
        </div>
      </div>

      <!-- Grid de Boletería -->
      <div id="boleteriaSection" class="boleteria-section" style="display: none;">
        <div class="section-header">
          <h2>BOLETERÍA CONFIGURADA</h2>
        </div>
        <div id="boleteriaGrid" class="boleteria-grid">
          <!-- Se llenará dinámicamente -->
        </div>
        <div id="noBoleteriaMessage" class="no-data" style="display: none;">
          <svg class="no-data-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
            <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
          </svg>
          <h3>NO HAY BOLETERÍA CONFIGURADA</h3>
          <p>Agrega localidades con sus precios y disponibilidad</p>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal Crear Boletería -->
  <div id="boleteriaModal" class="modal">
    <div class="modal-content-medium">
      <div class="modal-header">
        <h2>AGREGAR BOLETERÍA</h2>
        <button id="closeModal" class="btn-close">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      
      <form id="boleteriaForm">
        <input type="hidden" id="eventoIdHidden">
        
        <div class="form-grid">
          <div class="form-group full-width">
            <label for="localidad">LOCALIDAD</label>
            <select id="localidad" name="localidad" required class="form-select">
              <option value="">-- Selecciona una localidad --</option>
              {localidades.map(loc => (
                <option value={loc.nombre_localidad}>{loc.nombre_localidad} ({loc.codigo_localidad})</option>
              ))}
            </select>
          </div>

          <div class="form-group">
            <label for="valor">VALOR DE LA BOLETA</label>
            <input type="number" id="valor" name="valor" required placeholder="Ej: 50000" min="0" step="1000">
          </div>

          <div class="form-group">
            <label for="cantidad">CANTIDAD DISPONIBLE</label>
            <input type="number" id="cantidad" name="cantidad" required placeholder="Ej: 100" min="1">
          </div>
        </div>

        <div class="form-actions">
          <button type="button" id="cancelForm" class="btn-secondary">CANCELAR</button>
          <button type="submit" class="btn-primary">AGREGAR BOLETERÍA</button>
        </div>
      </form>

      <div id="formMensaje" class="mensaje"></div>
    </div>
  </div>
</Layout>

<style>
  .admin-wrapper {
    display: flex;
    min-height: 100vh;
    background: #0a0a0a;
  }

  .admin-sidebar {
    width: 280px;
    background: linear-gradient(180deg, #2d0a4e 0%, #1a0033 100%);
    border-right: 3px solid #ff0066;
    position: fixed;
    height: 100vh;
    overflow-y: auto;
  }

  .sidebar-header {
    padding: 2rem 1.5rem;
    border-bottom: 2px solid rgba(255, 0, 102, 0.3);
  }

  .sidebar-logo {
    color: #fff;
    font-size: 1.8rem;
    font-weight: 900;
    letter-spacing: 3px;
    background: linear-gradient(90deg, #ff0066, #ff6b9d);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 0.3rem;
  }

  .sidebar-subtitle {
    color: #aaa;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 2px;
  }

  .sidebar-nav {
    padding: 1.5rem 0;
  }

  .nav-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.5rem;
    color: #ccc;
    text-decoration: none;
    transition: all 0.3s;
    font-weight: 600;
    font-size: 0.95rem;
    letter-spacing: 0.5px;
  }

  .nav-icon {
    width: 22px;
    height: 22px;
    stroke-width: 2.5;
  }

  .nav-item:hover {
    background: rgba(255, 0, 102, 0.15);
    color: #fff;
    border-left: 4px solid #ff0066;
  }

  .nav-item.active {
    background: rgba(255, 0, 102, 0.2);
    color: #ff0066;
    border-left: 4px solid #ff0066;
  }

  .nav-logout {
    margin-top: 2rem;
    border-top: 2px solid rgba(255, 0, 102, 0.3);
    padding-top: 1.5rem;
    color: #ff6b6b;
  }

  .nav-logout:hover {
    background: rgba(255, 107, 107, 0.1);
    border-left: 4px solid #ff6b6b;
  }

  .admin-main {
    flex: 1;
    margin-left: 280px;
    padding: 2.5rem;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2.5rem;
  }

  .admin-header h1 {
    font-size: 2.8rem;
    font-weight: 900;
    color: #ff0066;
    margin-bottom: 0.5rem;
    letter-spacing: 3px;
  }

  .admin-header p {
    color: #aaa;
    font-size: 1.1rem;
  }

  .btn-primary {
    padding: 0.9rem 2rem;
    background: linear-gradient(135deg, #ff0066, #cc0052);
    color: #fff;
    text-decoration: none;
    border-radius: 30px;
    font-weight: 700;
    transition: all 0.3s;
    border: none;
    cursor: pointer;
    font-size: 0.9rem;
    letter-spacing: 1px;
  }

  .btn-primary:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(255, 0, 102, 0.5);
  }

  .btn-primary:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Selector de Evento */
  .selector-section {
    background: rgba(255, 255, 255, 0.05);
    padding: 2rem;
    border-radius: 15px;
    border: 2px solid rgba(255, 0, 102, 0.2);
    margin-bottom: 2rem;
  }

  .form-group label {
    color: #ff0066;
    font-weight: 700;
    font-size: 0.9rem;
    margin-bottom: 0.8rem;
    letter-spacing: 1px;
    display: block;
  }

  .evento-select {
    width: 100%;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.4);
    border: 2px solid rgba(255, 0, 102, 0.3);
    border-radius: 10px;
    color: #fff;
    font-size: 1rem;
    transition: all 0.3s;
    font-family: 'Montserrat', sans-serif;
    cursor: pointer;
  }

  .evento-select:focus {
    outline: none;
    border-color: #ff0066;
    box-shadow: 0 0 15px rgba(255, 0, 102, 0.3);
  }

  .evento-select option {
    background: #1a0033;
    color: #fff;
  }

  /* Info del Evento */
  .evento-info-section {
    margin-bottom: 2rem;
  }

  .evento-info-card {
    background: linear-gradient(135deg, rgba(138, 43, 226, 0.2), rgba(255, 0, 102, 0.2));
    padding: 2rem;
    border-radius: 15px;
    border: 2px solid #ff0066;
  }

  .evento-info-card h3 {
    color: #fff;
    font-size: 1.8rem;
    font-weight: 900;
    margin-bottom: 1rem;
  }

  .evento-detalles {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .evento-detalles span {
    color: #ccc;
    font-size: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .evento-detalles span::before {
    content: "•";
    color: #ff0066;
    font-size: 1.5rem;
  }

  /* Boletería Section */
  .boleteria-section {
    background: rgba(255, 255, 255, 0.03);
    padding: 2rem;
    border-radius: 15px;
    border: 2px solid rgba(255, 0, 102, 0.2);
  }

  .section-header {
    margin-bottom: 2rem;
  }

  .section-header h2 {
    color: #ff0066;
    font-size: 1.6rem;
    font-weight: 900;
    letter-spacing: 2px;
  }

  .boleteria-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .boleta-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    border: 2px solid rgba(255, 0, 102, 0.2);
    overflow: hidden;
    transition: all 0.3s;
  }

  .boleta-card:hover {
    transform: translateY(-5px);
    border-color: #ff0066;
    box-shadow: 0 10px 30px rgba(255, 0, 102, 0.3);
  }

  .boleta-header {
    background: linear-gradient(135deg, #8a2be2, #ff0066);
    padding: 1.5rem;
  }

  .boleta-localidad {
    color: #fff;
    font-size: 1.3rem;
    font-weight: 900;
    letter-spacing: 1px;
  }

  .boleta-body {
    padding: 1.5rem;
  }

  .boleta-info {
    margin-bottom: 1rem;
  }

  .boleta-label {
    color: #aaa;
    font-size: 0.85rem;
    margin-bottom: 0.3rem;
  }

  .boleta-value {
    color: #fff;
    font-size: 1.2rem;
    font-weight: 700;
  }

  .boleta-precio {
    color: #ff0066;
    font-size: 1.5rem;
    font-weight: 900;
  }

  .no-data {
    text-align: center;
    padding: 4rem 2rem;
  }

  .no-data-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 1.5rem;
    stroke: #ff0066;
    opacity: 0.5;
  }

  .no-data h3 {
    color: #ff0066;
    font-size: 1.8rem;
    margin-bottom: 1rem;
    font-weight: 900;
    letter-spacing: 2px;
  }

  .no-data p {
    color: #aaa;
    font-size: 1.1rem;
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.85);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(5px);
  }

  .modal.active {
    display: flex;
  }

  .modal-content-medium {
    background: linear-gradient(135deg, #2d0a4e 0%, #1a0033 100%);
    padding: 2.5rem;
    border-radius: 20px;
    border: 2px solid #ff0066;
    max-width: 600px;
    width: 90%;
    animation: modalSlideIn 0.3s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid rgba(255, 0, 102, 0.3);
  }

  .modal-header h2 {
    color: #ff0066;
    font-size: 2rem;
    font-weight: 900;
    letter-spacing: 2px;
  }

  .btn-close {
    background: none;
    border: none;
    color: #fff;
    cursor: pointer;
    padding: 0.5rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s;
  }

  .btn-close svg {
    width: 24px;
    height: 24px;
    stroke-width: 3;
  }

  .btn-close:hover {
    background: rgba(255, 0, 102, 0.2);
    border-radius: 50%;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group.full-width {
    grid-column: 1 / -1;
  }

  .form-group input,
  .form-group select,
  .form-select {
    padding: 1rem;
    background: rgba(0, 0, 0, 0.4);
    border: 2px solid rgba(255, 0, 102, 0.3);
    border-radius: 10px;
    color: #fff;
    font-size: 1rem;
    transition: all 0.3s;
    font-family: 'Montserrat', sans-serif;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-select:focus {
    outline: none;
    border-color: #ff0066;
    box-shadow: 0 0 15px rgba(255, 0, 102, 0.3);
  }

  .form-select option {
    background: #1a0033;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }

  .btn-secondary {
    padding: 0.9rem 2rem;
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border: 2px solid #fff;
    border-radius: 30px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 0.9rem;
    letter-spacing: 1px;
  }

  .btn-secondary:hover {
    background: #fff;
    color: #1a0033;
  }

  .mensaje {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 10px;
    font-weight: 600;
    text-align: center;
    display: none;
  }

  .mensaje.success {
    background: rgba(0, 255, 136, 0.2);
    color: #00ff88;
    border: 2px solid #00ff88;
    display: block;
  }

  .mensaje.error {
    background: rgba(255, 107, 107, 0.2);
    color: #ff6b6b;
    border: 2px solid #ff6b6b;
    display: block;
  }

  @media (max-width: 968px) {
    .admin-sidebar {
      width: 100%;
      position: relative;
      height: auto;
    }

    .admin-main {
      margin-left: 0;
      padding: 1.5rem;
    }

    .admin-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .admin-header h1 {
      font-size: 2rem;
    }

    .boleteria-grid {
      grid-template-columns: 1fr;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .modal-content-medium {
      width: 95%;
      padding: 1.5rem;
    }
  }
</style>

<script>
  const API_URL = 'http://127.0.0.1:8000';
  
  // Elementos del DOM
  const selectEvento = document.getElementById('selectEvento') as HTMLSelectElement;
  const btnCrearBoleteria = document.getElementById('btnCrearBoleteria') as HTMLButtonElement;
  const eventoInfo = document.getElementById('eventoInfo') as HTMLElement;
  const eventoNombre = document.getElementById('eventoNombre') as HTMLHeadingElement;
  const eventoFecha = document.getElementById('eventoFecha') as HTMLSpanElement;
  const eventoLugar = document.getElementById('eventoLugar') as HTMLSpanElement;
  const boleteriaSection = document.getElementById('boleteriaSection') as HTMLElement;
  const boleteriaGrid = document.getElementById('boleteriaGrid') as HTMLElement;
  const noBoleteriaMessage = document.getElementById('noBoleteriaMessage') as HTMLElement;
  const boleteriaModal = document.getElementById('boleteriaModal') as HTMLElement;
  const closeModal = document.getElementById('closeModal') as HTMLButtonElement;
  const cancelForm = document.getElementById('cancelForm') as HTMLButtonElement;
  const boleteriaForm = document.getElementById('boleteriaForm') as HTMLFormElement;
  const formMensaje = document.getElementById('formMensaje') as HTMLElement;
  const eventoIdHidden = document.getElementById('eventoIdHidden') as HTMLInputElement;

  let eventoSeleccionadoId: number | null = null;
  let eventoActual: any = null;

  // Cargar evento si viene de query param
  if (selectEvento.value) {
    cargarEvento(Number(selectEvento.value));
  }

  // Evento: cambio de selección
  selectEvento.addEventListener('change', async () => {
    const eventoId = selectEvento.value;
    if (eventoId) {
      await cargarEvento(Number(eventoId));
    } else {
      ocultarSecciones();
    }
  });

  async function cargarEvento(eventoId: number) {
    try {
      eventoSeleccionadoId = eventoId;
      btnCrearBoleteria.disabled = false;

      // Cargar información del evento
      const responseEvento = await fetch(`${API_URL}/eventos/${eventoId}`);
      const resultEvento = await responseEvento.json();

      if (resultEvento.success && resultEvento.data) {
        eventoActual = resultEvento.data;
        eventoNombre.textContent = eventoActual.nombre;
        eventoFecha.textContent = new Date(eventoActual.fecha_inicio).toLocaleDateString('es-CO', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        eventoLugar.textContent = `${eventoActual.lugar}, ${eventoActual.municipio}`;
        eventoInfo.style.display = 'block';
      }

      // Cargar boletería del evento
      await cargarBoleteria(eventoId);
      boleteriaSection.style.display = 'block';

    } catch (error) {
      console.error('Error al cargar evento:', error);
      alert('Error al cargar el evento');
    }
  }

  async function cargarBoleteria(eventoId: number) {
    try {
      const response = await fetch(`${API_URL}/boleteria/${eventoId}`);
      const result = await response.json();

      boleteriaGrid.innerHTML = '';

      if (result.success && result.data && result.data.length > 0) {
        noBoleteriaMessage.style.display = 'none';
        
        result.data.forEach((boleta: any) => {
          const card = document.createElement('div');
          card.className = 'boleta-card';
          card.innerHTML = `
            <div class="boleta-header">
              <div class="boleta-localidad">${boleta.localidad}</div>
            </div>
            <div class="boleta-body">
              <div class="boleta-info">
                <div class="boleta-label">PRECIO</div>
                <div class="boleta-precio">$${Number(boleta.valor_boleta).toLocaleString('es-CO')}</div>
              </div>
              <div class="boleta-info">
                <div class="boleta-label">DISPONIBLES</div>
                <div class="boleta-value">${boleta.cantidad_disponible} boletas</div>
              </div>
            </div>
          `;
          boleteriaGrid.appendChild(card);
        });
      } else {
        noBoleteriaMessage.style.display = 'block';
      }
    } catch (error) {
      console.error('Error al cargar boletería:', error);
    }
  }

  function ocultarSecciones() {
    eventoInfo.style.display = 'none';
    boleteriaSection.style.display = 'none';
    btnCrearBoleteria.disabled = true;
    eventoSeleccionadoId = null;
  }

  // Abrir modal
  btnCrearBoleteria.addEventListener('click', () => {
    if (eventoSeleccionadoId) {
      eventoIdHidden.value = String(eventoSeleccionadoId);
      boleteriaForm.reset();
      formMensaje.className = 'mensaje';
      formMensaje.style.display = 'none';
      boleteriaModal.classList.add('active');
    }
  });

  // Cerrar modal
  function cerrarModal() {
    boleteriaModal.classList.remove('active');
    boleteriaForm.reset();
  }

  closeModal.addEventListener('click', cerrarModal);
  cancelForm.addEventListener('click', cerrarModal);

  boleteriaModal.addEventListener('click', (e) => {
    if (e.target === boleteriaModal) {
      cerrarModal();
    }
  });

  // Submit del formulario
  boleteriaForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(boleteriaForm);
    const data = {
      id_evento: Number(eventoIdHidden.value),
      localidad: formData.get('localidad') as string,
      valor: Number(formData.get('valor')),
      cantidad: Number(formData.get('cantidad')),
    };

    try {
      const response = await fetch(`${API_URL}/boleteria`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (result.success) {
        formMensaje.className = 'mensaje success';
        formMensaje.textContent = 'Boletería agregada correctamente';
        formMensaje.style.display = 'block';
        
        setTimeout(async () => {
          cerrarModal();
          if (eventoSeleccionadoId) {
            await cargarBoleteria(eventoSeleccionadoId);
          }
        }, 1500);
      } else {
        formMensaje.className = 'mensaje error';
        formMensaje.textContent = 'Error: ' + result.message;
        formMensaje.style.display = 'block';
      }
    } catch (error) {
      formMensaje.className = 'mensaje error';
      formMensaje.textContent = 'Error al agregar la boletería';
      formMensaje.style.display = 'block';
      console.error(error);
    }
  });
</script>